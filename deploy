#!/usr/bin/python

import os, sys, yaml, collections, subprocess

_mapping_tag = yaml.resolver.BaseResolver.DEFAULT_MAPPING_TAG

def dict_representer(dumper, data):
    return dumper.represent_dict(data.iteritems())

def dict_constructor(loader, node):
    return collections.OrderedDict(loader.construct_pairs(node))

yaml.add_representer(collections.OrderedDict, dict_representer)
yaml.add_constructor(_mapping_tag, dict_constructor)

def run(wd, cmd):
    status = os.system("cd %s && %s" % (wd, cmd))
    if (status != 0):
        raise Exception("command failed[%s]: %s" % (status, cmd))

def call(*args, **kwargs):
    return subprocess.check_output(args, stderr=subprocess.STDOUT, **kwargs)

base = os.path.abspath(os.path.dirname(__file__))
kube = os.path.join(base, "kube.yaml")
backend = os.path.join(base, "backend")
frontend = os.path.join(base, "frontend")

if len(sys.argv) > 1 and sys.argv[1] != "backend":
    run(frontend, "npm run build")
    run(base, "rm -rf backend/static/* && cp -r frontend/build/* backend/static")

deployment = os.path.join(backend, "deployment.yaml")
version = call("git", "rev-parse", "HEAD").strip()
image = "gcr.io/datawire-sandbox/blackbird:%s" % version

run(backend, "docker build . -t %s" % image)
run(backend, "docker push %s" % image)

with open(deployment) as f:
    reified = f.read().replace("__IMAGE__", image)
with open(kube, "write") as f:
    f.write(reified)

print "deploying %s" % image
run(backend, "kubectl apply -f %s" % kube)
